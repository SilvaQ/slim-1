syntax = "proto3";

// Built with protobuf 1.2.0:
// go get github.com/golang/protobuf/{proto,protoc-gen-go}@v1.2.0
// protoc --proto_path=. --go_out=. slim.proto

option go_package = "trie";

// Bitmap is an array of bits.
//
// Since 0.5.10
message Bitmap {

    // Words contains bitmap
    //
    // Since 0.5.10
    repeated uint64 Words = 20;


    // RankIndex speeds up rank() by pre-calculated it
    //
    // Since 0.5.10
    repeated int32 RankIndex = 30;


    // SelectIndex speeds up select() by pre-calculated it
    //
    // Since 0.5.10
    repeated int32 SelectIndex = 40;
}

// VLenArray stores var-length []byte elts.
//
// Since 0.5.10
message VLenArray {

    // N is the max set bit index plus 1.
    //
    // Since 0.5.10
    int32 N = 10;

    // EltCnt is the number of present elts.
    //
    // Since 0.5.10
    int32 EltCnt = 11;

    // PresenceBM set 1 at the i-th bit if the i-th elt presents.
    //
    // Since 0.5.10
    Bitmap PresenceBM = 61;


    // PositionBM is a bitmap of starting position of every present elt.
    //
    // Since 0.5.10
    Bitmap PositionBM = 20;


    // FixedSize is set to elt size in Bytes field, if all the elts have equal sizes.
    //
    // Since 0.5.10
    int32 FixedSize = 23;


    // Bytes is the content in bytes
    //
    // Since 0.5.10
    bytes Bytes = 30;
}

// ClusteredLeaves stores leaf prefixes and leaf ids.
//
// Since 0.5.12
message ClusteredLeaves {

    // FirstLeafId is the leaf id of the first key
    int32 FirstLeafId = 10;

    // Offsets stores the offset of every record, plus one last
    // offset equals to len(Bytes).
    //
    // To read records[i]: Bytes[Offsets[i]: Offsets[i+1]]
    repeated uint32 Offsets = 11;

    // Bytes are packed records.
    bytes Bytes = 21;
}

// Slim is the internal structure of slim trie and other slim data structure.
// It is NOT a public type and do not rely on it.
// Since protobuf just makes all message public.
//
// Since 0.5.10
message Slim {

    // Reserve removed fields:
    // Never reuse a removed field number.

    reserved 12; // int32 BigInnerOffset = 12;
    reserved 13; // int32 ShortMinusInner = 13;
    reserved 15; // uint64 ShortMask = 15;


    // BigInnerCnt is number of big (257 bit) inner node.
    //
    // Since 0.5.10
    int32 BigInnerCnt = 11;


    // ShortSize is the number of bit of short bitmap that reduce most memory
    // cost.
    //
    // Since 0.5.10
    int32 ShortSize = 14;


    // NodeTypeBM is a bitmap in which a "1" indicates the i-th node is an inner
    // node, otherwise it is a leaf.
    //
    // Since 0.5.10
    Bitmap NodeTypeBM = 20;


    // Inners is a array of var-length node label bitmaps.
    // The size of an element bitmap is aligned to 4.
    //
    // Since 0.5.10
    Bitmap Inners = 30;


    // ShortBM indicate most used inner node bitmaps.
    // These nodes takes 4 bits and the actual bitmaps are stored separate.
    //
    // Since 0.5.10
    Bitmap ShortBM = 31;


    // ShortTable is a mapping of short bitmap to full 17-bit bitmap.
    //
    // Since 0.5.10
    repeated uint32 ShortTable = 32;


    // InnerPrefixes of inner nodes.
    // There are two usages with this field:
    // - If inner node prefix is stored, it is a var-len array of stored prefix string.
    // - If only inner node prefix length is stored, it is a array with fixed-size elts. An array elt is the length in 4-bit of a prefix.
    //
    // In full-prefix mode:
    // An array element is a control byte followed by several data bytes.
    //
    // The 0-th bit in the control byte indicates whether a prefix is
    // truncated(not aligned to 8-bit).
    //
    // An inner node may have a prefix, if the starting bit of the node > the end
    // of previous node.
    //
    // The end of a prefix may not be 8-bit aligned.
    // Thus we need a bitmap to indicated this.
    // If prefix length is not 8-bit aligned, the trailing bits a filled with a
    // "1" followed by "0"s.
    // To retrieve the accurate prefix, remove the bits from the last "1".
    // E.g.:
    //
    //   prefix:                  11001100 11000011
    //   stored prefix:  00000000 11001100 11010011;  control byte = 0
    //
    //   prefix:                  11001100 110
    //   stored prefix:  00000001 11001100 11010000;  control byte = 1
    //
    // Since 0.5.10
    VLenArray InnerPrefixes = 38;


    // LeafPrefixes stores prefix of every leaf if it is not nil.
    // A leaf prefix unlike inner node prefix, is just a byte sequence, without a control byte.
    //
    // Since 0.5.10
    VLenArray LeafPrefixes = 58;


    // Leaves stores serialized leaf values.
    //
    // Since 0.5.10
    VLenArray Leaves = 60;


    // Clustered key suffixes and values that are lower than `BottomLevel`.
    //
    // Since 0.5.12
    repeated ClusteredLeaves Clustered = 70;
}
